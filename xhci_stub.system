<?xml version="1.0" encoding="UTF-8"?>
<!-- This work is Crown Copyright NCSC, 2023. -->
<system>
    <!-- driver required functionality MODIFY WITH CAUTION -->
    <memory_region name="heap_mem" size="0x2000000"/>
    <memory_region name="dma_pool" size="0x2000000"/>

    <!-- modify THESE physical addresses and sizes to match desired device.
    Default values are associated with the avnet MaaXBoard-->
    <memory_region name="xhci_mem" size="0x10_000" phys_addr="0x38200000"/>
    <memory_region name="timer_mem" size="0x20_000" phys_addr="0x306c0000"/>
    <memory_region name="xhci_phys_mem" size="0x1000" phys_addr="0x382f0000"/> <!--won't let me specify the correct size or base address, but this encompasses the phy-->

    <!-- shared memory for ring buffer mechanism -->
    <!-- API: Map these into PD that is going to use them -->
    <memory_region name="kbd_free" size="0x200_000" page_size="0x200_000"/>
    <memory_region name="kbd_used" size="0x200_000" page_size="0x200_000"/>
    <memory_region name="umass_req_free" size="0x200_000" page_size="0x200_000"/>
    <memory_region name="umass_req_used" size="0x200_000" page_size="0x200_000"/>
    <memory_region name="mse_free" size="0x200_000" page_size="0x200_000"/>
    <memory_region name="mse_used" size="0x200_000" page_size="0x200_000"/>
    <memory_region name="uts_free" size="0x200_000" page_size="0x200_000"/>
    <memory_region name="uts_used" size="0x200_000" page_size="0x200_000"/>
    <memory_region name="usb_new_device_free" size="0x200_000" page_size="0x200_000"/>
    <memory_region name="usb_new_device_used" size="0x200_000" page_size="0x200_000"/>

    <protection_domain name="xhci_stub" pp="true" priority="249">
        <map mr="heap_mem" vaddr="0x50000000" perms="rw" cached="false" setvar_vaddr="heap_base"/>
        <map mr="dma_pool" vaddr="0x54000000" perms="rw" cached="true" setvar_vaddr="dma_base"/>
        <map mr="xhci_mem" vaddr="0x38200000" perms="rw" cached="false" setvar_vaddr="xhci_base"/>
        <map mr="xhci_phys_mem" vaddr="0x382f0000" perms="rw" cached="false" setvar_vaddr="xhci_phy_base"/>
        <map mr="timer_mem" vaddr="0x306c0000" perms="rw" cached="false" setvar_vaddr="timer_base"/>
        
        <!-- shared memory for ring buffer mechanism -->
        <map mr="kbd_free" vaddr="0x4_000_000" perms="rw" cached="true" setvar_vaddr="kbd_free" />
        <map mr="kbd_used" vaddr="0x4_200_000" perms="rw" cached="true" setvar_vaddr="kbd_used" />
        <map mr="mse_free" vaddr="0x4_800_000" perms="rw" cached="true" setvar_vaddr="mse_free" />
        <map mr="mse_used" vaddr="0x4_a00_000" perms="rw" cached="true" setvar_vaddr="mse_used" />
        <map mr="umass_req_free" vaddr="0x4_c00_000" perms="rw" cached="true" setvar_vaddr="umass_req_free" />
        <map mr="umass_req_used" vaddr="0x4_e00_000" perms="rw" cached="true" setvar_vaddr="umass_req_used" />
        <map mr="usb_new_device_free" vaddr="0x5_000_000" perms="rw" cached="true" setvar_vaddr="usb_new_device_free" />
        <map mr="usb_new_device_used" vaddr="0x5_200_000" perms="rw" cached="true" setvar_vaddr="usb_new_device_used" />
        <map mr="uts_free" vaddr="0x5_400_000" perms="rw" cached="true" setvar_vaddr="uts_free" />
        <map mr="uts_used" vaddr="0x5_600_000" perms="rw" cached="true" setvar_vaddr="uts_used" />
        <program_image path="xhci_stub.elf" />

        <setvar symbol="dma_cp_paddr" region_paddr="dma_pool" />
    </protection_domain>

    <protection_domain name="mem_handler" pp="true" priority="252">
        <map mr="heap_mem" vaddr="0x50000000" perms="rw" cached="false" setvar_vaddr="heap_base"/>
        <program_image path="mem_handler.elf" />
    </protection_domain>

    <protection_domain name="hardware_interrupt" pp="true" priority="253">
        <map mr="xhci_mem" vaddr="0x38200000" perms="rw" cached="false" setvar_vaddr="xhci_base"/>
        <map mr="heap_mem" vaddr="0x50000000" perms="rw" cached="false" setvar_vaddr="heap_base"/>
        <map mr="timer_mem" vaddr="0x306c0000" perms="rw" cached="false" setvar_vaddr="timer_base"/>
        <irq irq="73" id="6"/> <!--usb irq offset by 32-->
        <program_image path="hardware.elf" />

        <setvar symbol="dma_cp_paddr" region_paddr="dma_pool" />
    </protection_domain>

    <protection_domain name="software_interrupt" pp="true" priority="250"> 
        <map mr="heap_mem" vaddr="0x50000000" perms="rw" cached="false" setvar_vaddr="heap_base"/>
        <map mr="dma_pool" vaddr="0x54000000" perms="rw" cached="true" setvar_vaddr="dma_base"/>
        <map mr="xhci_mem" vaddr="0x38200000" perms="rw" cached="false" setvar_vaddr="xhci_base"/>
        <map mr="timer_mem" vaddr="0x306c0000" perms="rw" cached="false" setvar_vaddr="timer_base"/>
        <program_image path="software.elf" />

        <!-- shared memory for ring buffer mechanism (mass storage not handled here) -->
        <map mr="kbd_free" vaddr="0x4_000_000" perms="rw" cached="true" setvar_vaddr="kbd_free" />
        <map mr="kbd_used" vaddr="0x4_200_000" perms="rw" cached="true" setvar_vaddr="kbd_used" />
        <map mr="mse_free" vaddr="0x4_800_000" perms="rw" cached="true" setvar_vaddr="mse_free" />
        <map mr="mse_used" vaddr="0x4_a00_000" perms="rw" cached="true" setvar_vaddr="mse_used" />
        <map mr="umass_req_free" vaddr="0x4_c00_000" perms="rw" cached="true" setvar_vaddr="umass_req_free" />
        <map mr="umass_req_used" vaddr="0x4_e00_000" perms="rw" cached="true" setvar_vaddr="umass_req_used" />
        <map mr="uts_free" vaddr="0x5_400_000" perms="rw" cached="true" setvar_vaddr="uts_free" />
        <map mr="uts_used" vaddr="0x5_600_000" perms="rw" cached="true" setvar_vaddr="uts_used" />

        <setvar symbol="dma_cp_paddr" region_paddr="dma_pool" />
    </protection_domain>

    <!-- mem handler methods -->
    <channel>
        <end pd="mem_handler" id="0"/>
        <end pd="xhci_stub" id="30"/>
    </channel>
    <channel>
        <end pd="mem_handler" id="1"/>
        <end pd="xhci_stub" id="31"/>
    </channel>
    <channel>
        <end pd="mem_handler" id="2"/>
        <end pd="xhci_stub" id="32"/>
    </channel>
    <channel>
        <end pd="mem_handler" id="10"/>
        <end pd="software_interrupt" id="30"/>
    </channel>
    <channel>
        <end pd="mem_handler" id="11"/>
        <end pd="software_interrupt" id="31"/>
    </channel>
    <channel>
        <end pd="mem_handler" id="12"/>
        <end pd="software_interrupt" id="32"/>
    </channel>
    <!--hand over fdt-->
    <channel>
        <end pd="mem_handler" id="4"/>
        <end pd="xhci_stub" id="44"/>
    </channel>

    <!--share xhci_sc with hardware interrupt-->
    <channel>
        <end pd="hardware_interrupt" id="0"/>
        <end pd="xhci_stub" id="0"/>
    </channel>

    <!-- usb discover call (hotplugging) -->
    <channel>
        <end pd="software_interrupt" id="17"/>
        <end pd="xhci_stub" id="17"/>
    </channel>

    <!--share interrupt functions with xhci_stub-->
    <channel>
        <end pd="software_interrupt" id="8"/>
        <end pd="xhci_stub" id="8"/>
    </channel>
    
    <!--share data structures with software interrupt-->
    <channel>
        <end pd="software_interrupt" id="1"/>
        <end pd="xhci_stub" id="1"/>
    </channel>
    <channel>
        <end pd="software_interrupt" id="2"/>
        <end pd="xhci_stub" id="2"/>
    </channel>
    <channel>
        <end pd="software_interrupt" id="3"/>
        <end pd="xhci_stub" id="3"/>
    </channel>
    <channel>
        <end pd="software_interrupt" id="4"/>
        <end pd="xhci_stub" id="4"/>
    </channel>
    <channel>
        <end pd="software_interrupt" id="5"/>
        <end pd="xhci_stub" id="5"/>
    </channel>
    <channel>
        <end pd="software_interrupt" id="6"/>
        <end pd="xhci_stub" id="6"/>
    </channel>
    <channel>
        <end pd="software_interrupt" id="9"/>
        <end pd="xhci_stub" id="9"/>
    </channel>

    <!-- softintr -->
    <!-- TODO: remove this-->
    <channel>
        <end pd="hardware_interrupt" id="7"/>
        <end pd="software_interrupt" id="7"/>
    </channel>
    <!-- end of driver required functionality -->

    <!-- !EXAMPLE API USER:

    Simple program that makes use of the xHCI API. map each of the *_free
    and *_used memory regions into the desired PD and assign virtual
    addresses. By default, each of these regions are size 0x200_000, but
    this can be changed above ^^. 
    
    To subscribe to the interrupts provided by a device, see the channel
    mappings below. The consumer PD requires xhci_api.c and xhci_api.h. -->

    <!-- These heap and heap ends are needed for the microkit LIBC.  They must
    be mapped with the setvar __heap_start and __heap_end respectively as seen
    below -->
    <memory_region name="client_heap" size="0x2000000"/>
    <memory_region name="client_heap_end" size="0x1000"/>

    <protection_domain name="example_client" pp="true" priority="101">
        <map mr="client_heap" vaddr="0x30000000" perms="rw" cached="false" setvar_vaddr="__heap_start"/>
        <map mr="client_heap_end" vaddr="0x32000000" perms="rw" cached="false" setvar_vaddr="__heap_end"/>
        <map mr="heap_mem" vaddr="0x50000000" perms="rw" cached="false" setvar_vaddr="other_heap_base"/>

        <!-- shared memory for ring buffer mechanism -->
        <map mr="kbd_free" vaddr="0x4_000_000" perms="rw" cached="true" setvar_vaddr="kbd_free" />
        <map mr="kbd_used" vaddr="0x4_200_000" perms="rw" cached="true" setvar_vaddr="kbd_used" />
        <map mr="mse_free" vaddr="0x4_800_000" perms="rw" cached="true" setvar_vaddr="mse_free" />
        <map mr="mse_used" vaddr="0x4_a00_000" perms="rw" cached="true" setvar_vaddr="mse_used" />
        <map mr="umass_req_free" vaddr="0x4_c00_000" perms="rw" cached="true" setvar_vaddr="umass_req_free" />
        <map mr="umass_req_used" vaddr="0x4_e00_000" perms="rw" cached="true" setvar_vaddr="umass_req_used" />
        <map mr="usb_new_device_free" vaddr="0x5_000_000" perms="rw" cached="true" setvar_vaddr="usb_new_device_free" />
        <map mr="usb_new_device_used" vaddr="0x5_200_000" perms="rw" cached="true" setvar_vaddr="usb_new_device_used" />
        <map mr="uts_free" vaddr="0x5_400_000" perms="rw" cached="true" setvar_vaddr="uts_free" />
        <map mr="uts_used" vaddr="0x5_600_000" perms="rw" cached="true" setvar_vaddr="uts_used" />

        <program_image path="example_client.elf" />
    </protection_domain>

    <!-- API calls:

    Each channel represents an interrupt from the specified device. The ID of
    each channel can be found in xhci_api.h. To subscribe to a device interrupt
    include the channel id in the notified() function of the desired protection
    domain. Then, use the driver_dequeue() method (example in example_client.c) provided
    by shared_ringbuffer library. Note that it is not necessary to subscribe to
    all devices. -->

    <!-- DEV TEMPORARY:
    
    This is the memory handler that is used by the driver. This will change
    sharing less information with the client, but for now use these calls to
    allocate memory. All 3 are necessary-->
    <channel>
        <end pd="mem_handler" id="5"/>
        <end pd="example_client" id="30"/>
    </channel>
    <channel>
        <end pd="mem_handler" id="6"/>
        <end pd="example_client" id="31"/>
    </channel>
    <channel>
        <end pd="mem_handler" id="7"/>
        <end pd="example_client" id="32"/>
    </channel>

    <!-- Driver initialise complete -->
    <channel>
        <end pd="xhci_stub" id="40"/>
        <end pd="example_client" id="40"/>
    </channel>
    <!-- USB Device Connect Event -->
    <channel>
        <end pd="xhci_stub" id="45"/>
        <end pd="example_client" id="45"/>
    </channel>
    <!-- Keyboard interrupt -->
    <channel>
        <end pd="software_interrupt" id="46"/>
        <end pd="example_client" id="46"/>
    </channel>
    <!-- blank -->
    <channel>
        <end pd="xhci_stub" id="47"/>
        <end pd="example_client" id="47"/>
    </channel>
    <!-- Mouse interrupt -->
    <channel>
        <end pd="software_interrupt" id="48"/>
        <end pd="example_client" id="48"/>
    </channel>
    <!-- Touchscreen event -->
    <channel>
        <end pd="software_interrupt" id="49"/>
        <end pd="example_client" id="49"/>
    </channel>
    <!-- Umass xfer complete -->
    <channel>
        <end pd="software_interrupt" id="50"/>
        <end pd="example_client" id="50"/>
    </channel>
</system>
